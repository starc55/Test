const jsBasicsToErrorHandlingTests = [
  // --- JavaScript boshlang'ich tushunchalar ---
  {
    question: "JavaScript qayerda ishlaydi?",
    option1: "Brauzer va serverda",
    option2: "Faqat brauzerda",
    option3: "Faqat serverda",
    option4: "Fayl tizimida",
    ans: 1,
  },
  {
    question: "`script` tegini HTMLda qaerga yozish tavsiya etiladi?",
    option1: "`<head>` ichida",
    option2: "`<body>` oxirida",
    option3: "`<title>` ichida",
    option4: "HTMLdan tashqarida",
    ans: 2,
  },
  {
    question: "`alert()` funksiyasi nima qiladi?",
    option1: "Konsolga xabar chiqaradi",
    option2: "Modal oynada xabar ko‘rsatadi",
    option3: "Fayl yozadi",
    option4: "Elementni o‘chiradi",
    ans: 2,
  },
  {
    question: "`var`, `let`, `const` farqi nimada?",
    option1: "`var` blok scopesiz",
    option2: "`let` va `const` blok scopega ega",
    option3: "`const` qiymati o‘zgarmaydi",
    option4: "Barchasi to‘g‘ri",
    ans: 4,
  },
  {
    question: "Shart operatori sintaksisi to‘g‘ri variantni tanlang:",
    option1: "`if (x > 0) { ... }`",
    option2: "`if x > 0 then { ... }`",
    option3: "`when (x > 0) { ... }`",
    option4: "`check (x > 0) { ... }`",
    ans: 1,
  },

  // --- Ma'lumot turlari va operatorlar ---
  {
    question: "`null` va `undefined` farqi nima?",
    option1: "Ikkalasi ham bir xil",
    option2: "`null` bo‘sh qiymat, `undefined` e'lon qilingan lekin qiymati yo‘q",
    option3: "`undefined` bo‘sh qiymat, `null` topilmadi",
    option4: "Farqi yo‘q",
    ans: 2,
  },
  {
    question: "Matnlarni birlashtirishning eng oddiy usuli:",
    option1: "`+` operatori",
    option2: "`concat()` metodi",
    option3: "Template literal ``${}``",
    option4: "Hammasi ishlaydi",
    ans: 4,
  },
  {
    question: "`===` operatori nima qiladi?",
    option1: "Qiymatni taqqoslaydi, turini e'tiborga olmaydi",
    option2: "Qiymat va turini ham taqqoslaydi",
    option3: "Faqat turini taqqoslaydi",
    option4: "Hech narsa",
    ans: 2,
  },
  {
    question: "`!true` natijasi nima bo‘ladi?",
    option1: "true",
    option2: "false",
    option3: "`undefined`",
    option4: "`null`",
    ans: 2,
  },
  {
    question: "Template literal qanday yoziladi?",
    option1: "'Hello ' + name",
    option2: "`Hello ${name}`",
    option3: "\"Hello ${name}\"",
    option4: "`Hello 'name'`",
    ans: 2,
  },

  // --- Funksiyalar va scope ---
  {
    question: "Deklaratsiya qilingan funksiya misoli:",
    option1: "`function sum(a, b) { return a + b }`",
    option2: "`let sum = (a, b) => a + b`",
    option3: "`const sum = function(a, b) { return a + b }`",
    option4: "Hammasi funksiya",
    ans: 1,
  },
  {
    question: "Arrow funksiyada `this` qanday ishlaydi?",
    option1: "O‘zining `this`i bor",
    option2: "Tashqi `this`ni meros oladi",
    option3: "`this` har doim `window`",
    option4: "`this` mavjud emas",
    ans: 2,
  },
  {
    question: "Funksiya parametrlari uchun standart qiymat berish:",
    option1: "`function f(a = 0) {}`",
    option2: "`function f(a) = 0 {}`",
    option3: "`function f(a == 0) {}`",
    option4: "`function f(default a = 0) {}`",
    ans: 1,
  },
  {
    question: "`return` operatori nima qiladi?",
    option1: "Qiymat qaytaradi va funksiyani to‘xtatadi",
    option2: "Faqat funksiyani to‘xtatadi",
    option3: "Xatolik otadi",
    option4: "Hech narsa",
    ans: 1,
  },

  // --- Array va obyektlar ---
  {
    question: "Obyekt yaratishning eng oddiy usuli:",
    option1: "`{ name: 'Ali', age: 20 }`",
    option2: "`new Object()`",
    option3: "`Object.create(null)`",
    option4: "`object()`",
    ans: 1,
  },
  {
    question: "Spread operatori vazifasi:",
    option1: "Massivni nusxalash yoki birlashtirish",
    option2: "Matnni kesish",
    option3: "Xatolik otish",
    option4: "Ma'lumotni shifrlash",
    ans: 1,
  },
  {
    question: "`array.find()` nima qaytaradi?",
    option1: "Topilgan elementni",
    option2: "Indexni",
    option3: "Boolean",
    option4: "Yangi massiv",
    ans: 1,
  },
  {
    question: "Obyektga yangi xususiyat qo‘shish to‘g‘ri usul:",
    option1: "`obj.newProp = 1`",
    option2: "`obj.add('newProp', 1)`",
    option3: "`push(obj, newProp)`",
    option4: "`insert(obj.newProp)`",
    ans: 1,
  },
  {
    question: "`Object.keys(obj)` natijasi:",
    option1: "Qiymatlar ro‘yxati",
    option2: "Kalitlar ro‘yxati",
    option3: "Elementlar soni",
    option4: "Boolean",
    ans: 2,
  },

  // --- Asinxron kod va Promise ---
  {
    question: "`setTimeout(fn, 0)` nima qiladi?",
    option1: "Darhol `fn`ni bajaradi",
    option2: "Navbat (queue)ga `fn`ni qo‘shadi",
    option3: "Xatolik otadi",
    option4: "Hech narsa",
    ans: 2,
  },
  {
    question: "`async` funksiya doimo nima qaytaradi?",
    option1: "Qiymat",
    option2: "Promise",
    option3: "Error",
    option4: "`undefined`",
    ans: 2,
  },
  {
    question: "`await` faqat qayerda ishlaydi?",
    option1: "Oddiy funksiya ichida",
    option2: "Global scope",
    option3: "`async` funksiya ichida",
    option4: "Har joyda",
    ans: 3,
  },

  // --- Error handling ---
  {
    question: "`try...catch` blokida `catch` qachon ishga tushadi?",
    option1: "Hech qachon",
    option2: "`try` blokida xatolik bo‘lsa",
    option3: "Kod normal tugaganda",
    option4: "`finally`dan keyin",
    ans: 2,
  },
  {
    question: "Xatolik otish operatori:",
    option1: "`error new`",
    option2: "`throw new Error('Xato')`",
    option3: "`return Error()`",
    option4: "`raise Error()`",
    ans: 2,
  },
  {
    question: "`finally` blokining vazifasi:",
    option1: "Faqat xato bo‘lsa ishlaydi",
    option2: "Hech qachon ishlamaydi",
    option3: "Har doim, xato bo‘lsa ham ishlaydi",
    option4: "Xatoni ushlaydi",
    ans: 3,
  },
];

export default jsBasicsToErrorHandlingTests;
